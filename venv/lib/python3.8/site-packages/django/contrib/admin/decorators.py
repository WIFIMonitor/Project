def action(function=None, *, permissions=None, description=None):
    """
    Conveniently add attributes to an action function::

        @***REMOVED***.action(
            permissions=['publish'],
            description='Mark selected stories as published',
        )
        def make_published(self, request, queryset):
            queryset.update(status='p')

    This is equivalent to setting some attributes (with the original, longer
    names) on the function directly::

        def make_published(self, request, queryset):
            queryset.update(status='p')
        make_published.allowed_permissions = ['publish']
        make_published.short_description = 'Mark selected stories as published'
    """
    def decorator(func):
        if permissions is not None:
            func.allowed_permissions = permissions
        if description is not None:
            func.short_description = description
        return func
    if function is None:
        return decorator
    else:
        return decorator(function)


def display(function=None, *, boolean=None, ordering=None, description=None, empty_value=None):
    """
    Conveniently add attributes to a display function::

        @***REMOVED***.display(
            boolean=True,
            ordering='-publish_date',
            description='Is Published?',
        )
        def is_published(self, obj):
            return obj.publish_date is not None

    This is equivalent to setting some attributes (with the original, longer
    names) on the function directly::

        def is_published(self, obj):
            return obj.publish_date is not None
        is_published.boolean = True
        is_published.***REMOVED***_order_field = '-publish_date'
        is_published.short_description = 'Is Published?'
    """
    def decorator(func):
        if boolean is not None and empty_value is not None:
            raise ValueError(
                'The boolean and empty_value arguments to the @display '
                'decorator are mutually exclusive.'
            )
        if boolean is not None:
            func.boolean = boolean
        if ordering is not None:
            func.***REMOVED***_order_field = ordering
        if description is not None:
            func.short_description = description
        if empty_value is not None:
            func.empty_value_display = empty_value
        return func
    if function is None:
        return decorator
    else:
        return decorator(function)


def register(*models, site=None):
    """
    Register the given model(s) classes and wrapped ModelAdmin class with
    ***REMOVED*** site:

    @register(Author)
    class AuthorAdmin(***REMOVED***.ModelAdmin):
        pass

    The `site` kwarg is an ***REMOVED*** site to use instead of the default ***REMOVED*** site.
    """
    from django.contrib.***REMOVED*** import ModelAdmin
    from django.contrib.***REMOVED***.sites import AdminSite, site as default_site

    def _model_***REMOVED***_wrapper(***REMOVED***_class):
        if not models:
            raise ValueError('At least one model must be passed to register.')

        ***REMOVED***_site = site or default_site

        if not isinstance(***REMOVED***_site, AdminSite):
            raise ValueError('site must subclass AdminSite')

        if not issubclass(***REMOVED***_class, ModelAdmin):
            raise ValueError('Wrapped class must subclass ModelAdmin.')

        ***REMOVED***_site.register(models, ***REMOVED***_class=***REMOVED***_class)

        return ***REMOVED***_class
    return _model_***REMOVED***_wrapper
