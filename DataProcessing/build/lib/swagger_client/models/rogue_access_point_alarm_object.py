# coding: utf-8

"""
    PRIMECORE_PRIMECORE-WS

    API Definition of primecore

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RogueAccessPointAlarmObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'acknowledgement_status': 'bool',
        'alarm_found_at': 'str',
        'device_name': 'str',
        'last_updated_at': 'str',
        'message': 'str',
        'severity': 'str',
        'time_stamp': 'str',
        'wireless_specific_alarm_id': 'str',
        'rogue_ap_alarm_details': 'RogueAccessPointAlarmObjectRogueApAlarmDetails'
    }

    attribute_map = {
        'id': 'id',
        'acknowledgement_status': 'acknowledgementStatus',
        'alarm_found_at': 'alarmFoundAt',
        'device_name': 'deviceName',
        'last_updated_at': 'lastUpdatedAt',
        'message': 'message',
        'severity': 'severity',
        'time_stamp': 'timeStamp',
        'wireless_specific_alarm_id': 'wirelessSpecificAlarmId',
        'rogue_ap_alarm_details': 'rogueApAlarmDetails'
    }

    def __init__(self, id=None, acknowledgement_status=None, alarm_found_at=None, device_name=None, last_updated_at=None, message=None, severity=None, time_stamp=None, wireless_specific_alarm_id=None, rogue_ap_alarm_details=None):
        """
        RogueAccessPointAlarmObject - a model defined in Swagger
        """

        self._id = None
        self._acknowledgement_status = None
        self._alarm_found_at = None
        self._device_name = None
        self._last_updated_at = None
        self._message = None
        self._severity = None
        self._time_stamp = None
        self._wireless_specific_alarm_id = None
        self._rogue_ap_alarm_details = None

        if id is not None:
          self.id = id
        if acknowledgement_status is not None:
          self.acknowledgement_status = acknowledgement_status
        if alarm_found_at is not None:
          self.alarm_found_at = alarm_found_at
        if device_name is not None:
          self.device_name = device_name
        if last_updated_at is not None:
          self.last_updated_at = last_updated_at
        if message is not None:
          self.message = message
        if severity is not None:
          self.severity = severity
        if time_stamp is not None:
          self.time_stamp = time_stamp
        if wireless_specific_alarm_id is not None:
          self.wireless_specific_alarm_id = wireless_specific_alarm_id
        if rogue_ap_alarm_details is not None:
          self.rogue_ap_alarm_details = rogue_ap_alarm_details

    @property
    def id(self):
        """
        Gets the id of this RogueAccessPointAlarmObject.

        :return: The id of this RogueAccessPointAlarmObject.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this RogueAccessPointAlarmObject.

        :param id: The id of this RogueAccessPointAlarmObject.
        :type: float
        """

        self._id = id

    @property
    def acknowledgement_status(self):
        """
        Gets the acknowledgement_status of this RogueAccessPointAlarmObject.

        :return: The acknowledgement_status of this RogueAccessPointAlarmObject.
        :rtype: bool
        """
        return self._acknowledgement_status

    @acknowledgement_status.setter
    def acknowledgement_status(self, acknowledgement_status):
        """
        Sets the acknowledgement_status of this RogueAccessPointAlarmObject.

        :param acknowledgement_status: The acknowledgement_status of this RogueAccessPointAlarmObject.
        :type: bool
        """

        self._acknowledgement_status = acknowledgement_status

    @property
    def alarm_found_at(self):
        """
        Gets the alarm_found_at of this RogueAccessPointAlarmObject.

        :return: The alarm_found_at of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._alarm_found_at

    @alarm_found_at.setter
    def alarm_found_at(self, alarm_found_at):
        """
        Sets the alarm_found_at of this RogueAccessPointAlarmObject.

        :param alarm_found_at: The alarm_found_at of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._alarm_found_at = alarm_found_at

    @property
    def device_name(self):
        """
        Gets the device_name of this RogueAccessPointAlarmObject.

        :return: The device_name of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """
        Sets the device_name of this RogueAccessPointAlarmObject.

        :param device_name: The device_name of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._device_name = device_name

    @property
    def last_updated_at(self):
        """
        Gets the last_updated_at of this RogueAccessPointAlarmObject.

        :return: The last_updated_at of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """
        Sets the last_updated_at of this RogueAccessPointAlarmObject.

        :param last_updated_at: The last_updated_at of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._last_updated_at = last_updated_at

    @property
    def message(self):
        """
        Gets the message of this RogueAccessPointAlarmObject.

        :return: The message of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this RogueAccessPointAlarmObject.

        :param message: The message of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._message = message

    @property
    def severity(self):
        """
        Gets the severity of this RogueAccessPointAlarmObject.

        :return: The severity of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """
        Sets the severity of this RogueAccessPointAlarmObject.

        :param severity: The severity of this RogueAccessPointAlarmObject.
        :type: str
        """
        allowed_values = ["CRITICAL", "MAJOR", "MINOR", "WARNING", "CLEARED", "INFORMATION"]
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def time_stamp(self):
        """
        Gets the time_stamp of this RogueAccessPointAlarmObject.

        :return: The time_stamp of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """
        Sets the time_stamp of this RogueAccessPointAlarmObject.

        :param time_stamp: The time_stamp of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._time_stamp = time_stamp

    @property
    def wireless_specific_alarm_id(self):
        """
        Gets the wireless_specific_alarm_id of this RogueAccessPointAlarmObject.

        :return: The wireless_specific_alarm_id of this RogueAccessPointAlarmObject.
        :rtype: str
        """
        return self._wireless_specific_alarm_id

    @wireless_specific_alarm_id.setter
    def wireless_specific_alarm_id(self, wireless_specific_alarm_id):
        """
        Sets the wireless_specific_alarm_id of this RogueAccessPointAlarmObject.

        :param wireless_specific_alarm_id: The wireless_specific_alarm_id of this RogueAccessPointAlarmObject.
        :type: str
        """

        self._wireless_specific_alarm_id = wireless_specific_alarm_id

    @property
    def rogue_ap_alarm_details(self):
        """
        Gets the rogue_ap_alarm_details of this RogueAccessPointAlarmObject.

        :return: The rogue_ap_alarm_details of this RogueAccessPointAlarmObject.
        :rtype: RogueAccessPointAlarmObjectRogueApAlarmDetails
        """
        return self._rogue_ap_alarm_details

    @rogue_ap_alarm_details.setter
    def rogue_ap_alarm_details(self, rogue_ap_alarm_details):
        """
        Sets the rogue_ap_alarm_details of this RogueAccessPointAlarmObject.

        :param rogue_ap_alarm_details: The rogue_ap_alarm_details of this RogueAccessPointAlarmObject.
        :type: RogueAccessPointAlarmObjectRogueApAlarmDetails
        """

        self._rogue_ap_alarm_details = rogue_ap_alarm_details

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RogueAccessPointAlarmObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
