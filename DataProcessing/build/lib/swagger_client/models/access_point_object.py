# coding: utf-8

"""
    PRIMECORE_PRIMECORE-WS

    API Definition of primecore

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AccessPointObject(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'client_count': 'float',
        'client_count_2_4_g_hz': 'float',
        'client_count_5_g_hz': 'float',
        'location': 'str',
        'model': 'str',
        'name': 'str',
        'status': 'str',
        'type': 'str',
        'up_time': 'float',
        'mac_address': 'str'
    }

    attribute_map = {
        'id': 'id',
        'client_count': 'clientCount',
        'client_count_2_4_g_hz': 'clientCount_2_4GHz',
        'client_count_5_g_hz': 'clientCount_5GHz',
        'location': 'location',
        'model': 'model',
        'name': 'name',
        'status': 'status',
        'type': 'type',
        'up_time': 'upTime',
        'mac_address': 'macAddress'
    }

    def __init__(self, id=None, client_count=None, client_count_2_4_g_hz=None, client_count_5_g_hz=None, location=None, model=None, name=None, status=None, type=None, up_time=None, mac_address=None):
        """
        AccessPointObject - a model defined in Swagger
        """

        self._id = None
        self._client_count = None
        self._client_count_2_4_g_hz = None
        self._client_count_5_g_hz = None
        self._location = None
        self._model = None
        self._name = None
        self._status = None
        self._type = None
        self._up_time = None
        self._mac_address = None

        if id is not None:
          self.id = id
        if client_count is not None:
          self.client_count = client_count
        if client_count_2_4_g_hz is not None:
          self.client_count_2_4_g_hz = client_count_2_4_g_hz
        if client_count_5_g_hz is not None:
          self.client_count_5_g_hz = client_count_5_g_hz
        if location is not None:
          self.location = location
        if model is not None:
          self.model = model
        if name is not None:
          self.name = name
        if status is not None:
          self.status = status
        if type is not None:
          self.type = type
        if up_time is not None:
          self.up_time = up_time
        if mac_address is not None:
          self.mac_address = mac_address

    @property
    def id(self):
        """
        Gets the id of this AccessPointObject.

        :return: The id of this AccessPointObject.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this AccessPointObject.

        :param id: The id of this AccessPointObject.
        :type: float
        """

        self._id = id

    @property
    def client_count(self):
        """
        Gets the client_count of this AccessPointObject.

        :return: The client_count of this AccessPointObject.
        :rtype: float
        """
        return self._client_count

    @client_count.setter
    def client_count(self, client_count):
        """
        Sets the client_count of this AccessPointObject.

        :param client_count: The client_count of this AccessPointObject.
        :type: float
        """

        self._client_count = client_count

    @property
    def client_count_2_4_g_hz(self):
        """
        Gets the client_count_2_4_g_hz of this AccessPointObject.

        :return: The client_count_2_4_g_hz of this AccessPointObject.
        :rtype: float
        """
        return self._client_count_2_4_g_hz

    @client_count_2_4_g_hz.setter
    def client_count_2_4_g_hz(self, client_count_2_4_g_hz):
        """
        Sets the client_count_2_4_g_hz of this AccessPointObject.

        :param client_count_2_4_g_hz: The client_count_2_4_g_hz of this AccessPointObject.
        :type: float
        """

        self._client_count_2_4_g_hz = client_count_2_4_g_hz

    @property
    def client_count_5_g_hz(self):
        """
        Gets the client_count_5_g_hz of this AccessPointObject.

        :return: The client_count_5_g_hz of this AccessPointObject.
        :rtype: float
        """
        return self._client_count_5_g_hz

    @client_count_5_g_hz.setter
    def client_count_5_g_hz(self, client_count_5_g_hz):
        """
        Sets the client_count_5_g_hz of this AccessPointObject.

        :param client_count_5_g_hz: The client_count_5_g_hz of this AccessPointObject.
        :type: float
        """

        self._client_count_5_g_hz = client_count_5_g_hz

    @property
    def location(self):
        """
        Gets the location of this AccessPointObject.

        :return: The location of this AccessPointObject.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this AccessPointObject.

        :param location: The location of this AccessPointObject.
        :type: str
        """

        self._location = location

    @property
    def model(self):
        """
        Gets the model of this AccessPointObject.

        :return: The model of this AccessPointObject.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this AccessPointObject.

        :param model: The model of this AccessPointObject.
        :type: str
        """

        self._model = model

    @property
    def name(self):
        """
        Gets the name of this AccessPointObject.

        :return: The name of this AccessPointObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this AccessPointObject.

        :param name: The name of this AccessPointObject.
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this AccessPointObject.

        :return: The status of this AccessPointObject.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AccessPointObject.

        :param status: The status of this AccessPointObject.
        :type: str
        """
        allowed_values = ["CRITICAL", "MAJOR", "MINOR", "WARNING", "CLEARED", "INFORMATION"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """
        Gets the type of this AccessPointObject.

        :return: The type of this AccessPointObject.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this AccessPointObject.

        :param type: The type of this AccessPointObject.
        :type: str
        """

        self._type = type

    @property
    def up_time(self):
        """
        Gets the up_time of this AccessPointObject.

        :return: The up_time of this AccessPointObject.
        :rtype: float
        """
        return self._up_time

    @up_time.setter
    def up_time(self, up_time):
        """
        Sets the up_time of this AccessPointObject.

        :param up_time: The up_time of this AccessPointObject.
        :type: float
        """

        self._up_time = up_time

    @property
    def mac_address(self):
        """
        Gets the mac_address of this AccessPointObject.

        :return: The mac_address of this AccessPointObject.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """
        Sets the mac_address of this AccessPointObject.

        :param mac_address: The mac_address of this AccessPointObject.
        :type: str
        """

        self._mac_address = mac_address

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AccessPointObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
